{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"item",
				"itemLen"
			],
			[
				"mi",
				"minRows"
			],
			[
				"his",
				"historyIndex"
			],
			[
				"pro",
				"prompt"
			],
			[
				"_",
				"_line"
			],
			[
				"prompt",
				"promptLength"
			],
			[
				"proc",
				"process"
			],
			[
				"exis",
				"existsSync"
			],
			[
				"bin",
				"binaries"
			],
			[
				"req",
				"require"
			],
			[
				"co",
				"coffee-shell"
			],
			[
				"liter",
				"literalToken"
			],
			[
				"here",
				"heredoc"
			],
			[
				"Make",
				"makeString"
			],
			[
				"index",
				"index_started"
			],
			[
				"to",
				"tokens"
			],
			[
				"bu",
				"builtin"
			],
			[
				"Coff",
				"CoffeeScript"
			],
			[
				"Ultimate",
				"ultimateshell"
			],
			[
				"ultimatesh",
				"ultimateshell"
			]
		]
	},
	"buffers":
	[
		{
			"file": "coffee-shell.coffee",
			"settings":
			{
				"buffer_size": 13999,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/media/11FA-BF32/README.diskdefines",
			"settings":
			{
				"buffer_size": 228,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/cobells/.config/sublime-text-2/Packages/User/CoffeeShell.sublime-build",
			"settings":
			{
				"buffer_size": 128,
				"line_ending": "Unix"
			}
		},
		{
			"file": "readline.coffee",
			"settings":
			{
				"buffer_size": 10115,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "class Shell\n	constructor: ->\n		@setPrompt = \">\"\n		@input = process.stdin\n		@output = process.stdout\n		@enabled = true\n		@cursor = 0\n		@closed = false\n		@line = ''\n		@completer = (if completer.length is 2 then completer else (v, callback) ->\n			callback null, completer(v)\n		)\n		@history = []\n		@historyIndex = -1\n\n		@\n		@\n\n		winSize = output.getWindowSize()\n		exports.columns = winSize[0]\n		if process.listeners(\"SIGWINCH\").length is 0\n			process.on \"SIGWINCH\", ->\n				winSize = output.getWindowSize()\n				exports.columns = winSize[0]\n\n	commonPrefix = (strings) ->\n	  return \"\"  if not strings or strings.length is 0\n	  sorted = strings.slice().sort()\n	  min = sorted[0]\n	  max = sorted[sorted.length - 1]\n	  i = 0\n	  len = min.length\n\n	  while i < len\n	    return min.slice(0, i)  unless min[i] is max[i]\n	    i++\n	  min\n\n\n	setPrompt: (prompt, length) ->\n		@_prompt = prompt\n		if length\n			@_promptLength = length\n		else\n			lines = prompt.split(/[\\r\\n]/)\n			lastLine = lines[lines.length - 1]\n			@_promptLength = Buffer.byteLength(lastLine)\n\n	prompt: (preserveCursor) ->\n		if @enabled\n			@cursor = 0  unless preserveCursor\n			@_refreshLine()\n		else\n			@output.write @_prompt\n\n	question: (query, cb) ->\n		if cb\n			@resume()\n			if @_questionCallback\n				@output.write \"\\n\"\n				@prompt()\n			else\n				@_oldPrompt = @_prompt\n				@setPrompt query\n				@_questionCallback = cb\n				@output.write \"\\n\"\n				@prompt()\n\n	_onLine: (line) ->\n		if @_questionCallback\n			cb = @_questionCallback\n			@_questionCallback = null\n			@setPrompt @_oldPrompt\n			cb line\n		else\n			@emit \"line\", line\n\n\n\n\n	_addHistory: ->\n		return \"\"  if @line.length is 0\n		@history.unshift @line\n		@line = \"\"\n		@historyIndex = -1\n		@cursor = 0\n		@history.pop()  if @history.length > kHistorySize\n		@history[0]\n\n	_refreshLine: ->\n		return  if @_closed\n		@output.cursorTo 0\n		@output.write @_prompt\n		@output.write @line\n		@output.clearLine 1\n\n\n	write: (d, key) ->\n		return  if @_closed\n		@_ttyWrite(d, key)\n\n	_insertString: (c) ->\n		if @cursor < @line.length\n			beg = @line.slice(0, @cursor)\n			end = @line.slice(@cursor, @line.length)\n			@line = beg + c + end\n			@cursor += c.length\n			@_refreshLine()\n		else\n			@line += c\n			@cursor += c.length\n			@output.write c\n\n	_tabComplete: ->\n		self = this\n		tty.setRawMode false\n		self.completer self.line.slice(0, self.cursor), (err, rv) ->\n			tty.setRawMode true\n			return  if err\n\n			completions = rv[0]\n			completeOn = rv[1]\n			if completions and completions.length\n				if completions.length is 1\n					self._insertString completions[0].slice(completeOn.length)\n				else\n					handleGroup = (group) ->\n						return  if group.length is 0\n						minRows = Math.ceil(group.length / maxColumns)\n						row = 0\n\n						while row < minRows\n							col = 0\n\n							while col < maxColumns\n								idx = row * maxColumns + col\n								break  if idx >= group.length\n								item = group[idx]\n								self.output.write item\n								if col < maxColumns - 1\n									s = 0\n									itemLen = item.length\n\n									while s < width - itemLen\n										self.output.write \" \"\n										s++\n								col++\n							self.output.write \"\\r\\n\"\n							row++\n						self.output.write \"\\r\\n\"\n					self.output.write \"\\r\\n\"\n					width = completions.reduce((a, b) ->\n						(if a.length > b.length then a else b)\n					).length + 2\n					maxColumns = Math.floor(self.columns / width) or 1\n					group = []\n					c = undefined\n					i = 0\n					compLen = completions.length\n\n					while i < compLen\n						c = completions[i]\n						if c is \"\"\n							handleGroup group\n							group = []\n						else\n							group.push c\n						i++\n					handleGroup group\n					f = completions.filter((e) ->\n						e  if e\n					)\n					prefix = commonPrefix(f)\n					self._insertString prefix.slice(completeOn.length)  if prefix.length > completeOn.length\n				self._refreshLine()\n\n	_wordLeft: ->\n		if @cursor > 0\n			leading = @line.slice(0, @cursor)\n			match = leading.match(/([^\\w\\s]+|\\w+|)\\s*$/)\n			@cursor -= match[0].length\n			@_refreshLine()\n\n	_wordRight: ->\n		if @cursor < @line.length\n			trailing = @line.slice(@cursor)\n			match = trailing.match(/^(\\s+|\\W+|\\w+)\\s*/)\n			@cursor += match[0].length\n			@_refreshLine()\n\n	_deleteLeft: ->\n		if @cursor > 0 and @line.length > 0\n			@line = @line.slice(0, @cursor - 1) + @line.slice(@cursor, @line.length)\n			@cursor--\n			@_refreshLine()\n\n	_deleteRight: ->\n		@line = @line.slice(0, @cursor) + @line.slice(@cursor + 1, @line.length)\n		@_refreshLine()\n\n	_deleteWordLeft: ->\n		if @cursor > 0\n			leading = @line.slice(0, @cursor)\n			match = leading.match(/([^\\w\\s]+|\\w+|)\\s*$/)\n			leading = leading.slice(0, leading.length - match[0].length)\n			@line = leading + @line.slice(@cursor, @line.length)\n			@cursor = leading.length\n			@_refreshLine()\n\n	_deleteWordRight: ->\n		if @cursor < @line.length\n			trailing = @line.slice(@cursor)\n			match = trailing.match(/^(\\s+|\\W+|\\w+)\\s*/)\n			@line = @line.slice(0, @cursor) + trailing.slice(match[0].length)\n			@_refreshLine()\n\n	_deleteLineLeft: ->\n		@line = @line.slice(@cursor)\n		@cursor = 0\n		@_refreshLine()\n\n	_deleteLineRight: ->\n		@line = @line.slice(0, @cursor)\n		@_refreshLine()\n\n	_line: ->\n		line = @_addHistory()\n		@output.write \"\\r\\n\"\n		@_onLine line\n\n	_historyNext: ->\n		if @historyIndex > 0\n			@historyIndex--\n			@line = @history[@historyIndex]\n			@cursor = @line.length\n			@_refreshLine()\n		else if @historyIndex is 0\n			@historyIndex: -1\n			@cursor = 0\n			@line = \"\"\n			@_refreshLine()\n\n	_historyPrev: ->\n		if @historyIndex + 1 < @history.length\n			@historyIndex++\n			@line = @history[@historyIndex]\n			@cursor = @line.length\n			@_refreshLine()\n\n\n\n\n	_ttyWrite: (s, key) ->\n		key = key or {}\n		if key.ctrl and key.shift\n			switch key.name\n				when \"backspace\"\n					@_deleteLineLeft()\n				when \"delete\"\n					@_deleteLineRight()\n		else if key.ctrl\n			switch key.name\n				#when \"c\"\n					#if @listeners(\"SIGINT\").length\n					#	@emit \"SIGINT\"\n					#else\n					#	@_attemptClose()\n				when \"h\"\n					@_deleteLeft()\n				#when \"d\"\n					#if @cursor is 0 and @line.length is 0\n					#	@_attemptClose()\n					#else @_deleteRight()  if @cursor < @line.length\n				when \"u\"\n					@cursor = 0\n					@line = \"\"\n					@_refreshLine()\n				when \"k\"\n					@_deleteLineRight()\n				when \"a\"\n					@cursor = 0\n					@_refreshLine()\n				when \"e\"\n					@cursor = @line.length\n					@_refreshLine()\n				when \"b\"\n					if @cursor > 0\n						@cursor--\n						@_refreshLine()\n				when \"f\"\n					unless @cursor is @line.length\n						@cursor++\n						@_refreshLine()\n				when \"n\"\n					@_historyNext()\n				when \"p\"\n					@_historyPrev()\n				when \"z\"\n					process.kill process.pid, \"SIGTSTP\"\n					return\n				when \"w\", \"backspace\"\n					@_deleteWordLeft()\n				when \"delete\"\n					@_deleteWordRight()\n				when \"backspace\"\n					@_deleteWordLeft()\n				when \"left\"\n					@_wordLeft()\n				when \"right\"\n					@_wordRight()\n		else if key.meta\n			switch key.name\n				when \"b\"\n					@_wordLeft()\n				when \"f\"\n					@_wordRight()\n				when \"d\", \"delete\"\n					@_deleteWordRight()\n				when \"backspace\"\n					@_deleteWordLeft()\n		else\n			switch key.name\n				when \"enter\"\n					@_line()\n				when \"backspace\"\n					@_deleteLeft()\n				when \"delete\"\n					@_deleteRight()\n				when \"tab\"\n					@_tabComplete()\n				when \"left\"\n					if @cursor > 0\n						@cursor--\n						@output.moveCursor -1, 0\n				when \"right\"\n					unless @cursor is @line.length\n						@cursor++\n						@output.moveCursor 1, 0\n				when \"home\"\n					@cursor = 0\n					@_refreshLine()\n				when \"end\"\n					@cursor = @line.length\n					@_refreshLine()\n				when \"up\"\n					@_historyPrev()\n				when \"down\"\n					@_historyNext()\n				else\n					s = s.toString(\"utf-8\")  if Buffer.isBuffer(s)\n					if s\n						lines = s.split('/\\n/') # s.split(/\\r\\n|\\n|\\r/)\n						i = 0\n						len = lines.length\n\n						while i < len\n							@_line()  if i > 0\n							@_insertString lines[i]\n							i++",
			"settings":
			{
				"buffer_size": 7776,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/CoffeeShell.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Snippet: #!/usr/bin/env"
			],
			[
				"coffee",
				"Set Syntax: CoffeeScript"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 582.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/cobells/Work/node/coffeeshell/readline.coffee",
		"/home/cobells/Work/node/coffeeshell/lexer.coffee",
		"/home/cobells/Work/node/coffeeshell/rewriter.coffee",
		"/home/cobells/Work/node/coffeeshell/grammar.coffee",
		"/home/cobells/Work/node/coffeeshell/parser.js",
		"/home/cobells/Work/node/coffeeshell/repl.coffee",
		"/home/cobells/Work/node/coffeeshell/node_modules/commander/commander.js/lib/commander.js",
		"/home/cobells/.config/sublime-text-2/Packages/Default/Base File.sublime-settings",
		"/home/cobells/Work/node/coffeeshell/coffee-shell.coffee",
		"/home/cobells/Store2",
		"/home/cobells/Work/node/coffeeshell/nano.save.2",
		"/home/cobells/Work/node/coffeeshell/node_modules/commander/commander.js/index.js",
		"/home/cobells/Work/node/coffeeshell/nano.save.1",
		"/home/cobells/Work/node/coffeeshell/nano.save",
		"/home/cobells/Work/node/coffeeshell/aoeu",
		"/home/cobells/Work/node/coffeeshell/nano.save.9",
		"/home/cobells/Work/node/coffeeshell/node_modules/commander/commander.js/Makefile",
		"/home/cobells/Work/node/coffeeshell/nodes.coffee",
		"/home/cobells/.config/sublime-text-2/Packages/Default/Global.sublime-settings",
		"/home/cobells/Work/node/coffeeshell/bin/coffee-shell",
		"/home/cobells/Work/node/coffeeshell/README",
		"/home/cobells/.config/sublime-text-2/Packages/User/Global.sublime-settings",
		"/home/cobells/.config/sublime-text-2/Packages/User/CoffeeShell.sublime-build",
		"/home/cobells/Work/node/coffeeshell/command.js",
		"/home/cobells/Work/node/coffeeshell/command.coffee",
		"/home/cobells/.config/sublime-text-2/Packages/User/CoffeeScript.sublime-settings",
		"/home/cobells/.config/sublime-text-2/Packages/User/Base File.sublime-settings",
		"/home/cobells/.config/sublime-text-2/Packages/User/CoffeeShell.js",
		"/home/cobells/Work/node/coffeeshell/coffeeshell.sublime-project",
		"/home/cobells/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/cobells/Work/node/coffeeshell/bin/coffee-shell.js",
		"/home/cobells/Work/node/coffeeshell/oldtokenizer",
		"/home/cobells/Work/node/coffeeshell/notes",
		"/home/cobells/Work/node/coffee-script/src/lexer.coffee",
		"/home/cobells/Work/node/coffeeshell/coffee-script.coffee",
		"/home/cobells/Work/node/coffeeshell/utf",
		"/home/cobells/Work/node/coffeeshell/node_modules/coffee-script/lib/coffee-script/lexer.js",
		"/home/cobells/Work/node/coffeeshell/package.json",
		"/home/cobells/.config/sublime-text-2/Packages/CoffeeScript/Commands/Run.tmCommand",
		"/home/cobells/.config/sublime-text-2/Packages/CoffeeScript/Commands/Run selected text.tmCommand",
		"/home/cobells/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/cobells/.config/sublime-text-2/Packages/User/JSON.sublime-settings",
		"/home/cobells/Work/node/coffeeshell/coffeeshell.sublime-workspace",
		"/home/cobells/Work/node/coffeeshell/coffee-shell.js",
		"/home/cobells/Work/node/coffeeshell/lexer.js",
		"/home/cobells/Work/node/node_modules/coffee-shell/grammar.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/parser.js",
		"/home/cobells/Work/node/node_modules/coffee-shell/helpers.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/rewriter.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/package.json",
		"/home/cobells/Work/node/node_modules/coffee-shell/repl.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/bin/coffee-shell",
		"/home/cobells/Work/node/node_modules/coffee-shell/coffee-shell.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/lexer.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/coffee-script.coffee",
		"/home/cobells/Work/node/node_modules/coffee-shell/coffee-script.js",
		"/home/cobells/Work/node/coffee-script/src/grammar.coffee",
		"/home/cobells/.coffee_history",
		"/home/cobells/Work/node/coffee-script/lib/coffee-script/parser.js",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/install",
		"/home/cobells/.bash_history",
		"/home/cobells/Work/node/node_modules/coffee-shell/new.save",
		"/home/cobells/Work/node/node_modules/coffee-shell/new.save.1",
		"/home/cobells/Work/node/node_modules/coffee-shell/new.save.2",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/copyright",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/config.log",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/20_ultimateshell.gconf-defaults",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/changelog",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/rules",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/prerm",
		"/media/Hoard/Work/ubn2/ultimateshell/ultimateshell/debian/control",
		"/media/Media/System Volume Information/tracking.log",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/zsh/.zshrc",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/gterminal/oneterminal",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/gterminal/tmux-launch",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/zsh/.zlogin",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/vartest.sh",
		"/home/cobells/.gvfs/SFTP for mark on doob-un4/home/mark/Projects/ultimateshell/tmux/.tmux.conf",
		"/home/cobells/.config/sublime-text-2/Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
		"/home/cobells/.config/sublime-text-2/Packages/User/Distraction Free.sublime-settings",
		"/home/cobells/.config/sublime-text-2/Packages/User/Shell-Unix-Generic.sublime-settings",
		"/home/cobells/.config/sublime-text-2/Packages/User/Plain text.sublime-settings",
		"/home/mark/Projects/unity-2d_5.2-0ubuntu1ppa2_source.build",
		"/home/mark/.cache/.fr-sGxfdB/DEBIAN/control",
		"/home/mark/.cache/.fr-SkLf7o/DEBIAN/md5sums",
		"/home/mark/.cache/.fr-HgiLsb/DEBIAN/control",
		"/home/mark/Projects/ultimateshell/zsh/.zshrc",
		"/home/mark/Projects/ultimateshell/.ultimateshell/.cache/DEBS_avail",
		"/home/mark/Projects/ultimateshell/install.sh",
		"/home/mark/Projects/ultimateshell/gterminal/oneterminal",
		"/home/mark/Projects/ultimateshell/test.sh",
		"/home/mark/Projects/ultimateshell/gterminal/oneterminal.sh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/themes/ultimateshell.zsh-theme",
		"/home/mark/Projects/ultimateshell/screenrc",
		"/home/mark/Projects/ultimateshell/ref/screen/example.screenrc",
		"/home/mark/Projects/ultimateshell/.ultimateshell/themes/zhann.zsh-theme",
		"/home/mark/Projects/ultimateshell/.ultimateshell/themes/philips.zsh-theme",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/git.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/themes/robbyrussell.zsh-theme",
		"/home/mark/Projects/Shell Scripts/mouseclick.sh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/bootstrap.sh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/README.textile",
		"/home/mark/.config/sublime-text-2/Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
		"/home/mark/Projects/ultimateshell/.ultimateshell/plugins/npm/npm.plugin.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/.gitignore",
		"/home/mark/Projects/ultimateshell/zsh/zshrc_back",
		"/home/mark/Projects/ultimateshell/.ultimateshell/tools/install.sh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/tools/check_for_upgrade.sh",
		"/home/mark/.oh-my-zsh-backup/templates/zshrc.zsh-template",
		"/home/mark/Projects/ultimateshell/.ultimateshell/themes/apple.zsh-theme",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/functions.zsh",
		"/home/mark/.oh-my-zsh-backup/oh-my-zsh.sh",
		"/home/mark/Projects/ultimateshell/ultimateshell.sublime-project",
		"/home/mark/.oh-my-zsh/oh-my-zsh.sh",
		"/home/mark/.oh-my-zsh/README.textile",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/directories.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/edit-command-line.zsh",
		"/home/mark/Projects/ultimateshell/ref/conf_order.txt",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/theme-and-appearance.zsh",
		"/home/mark/.oh-my-zsh/lib/theme-and-appearance.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/grep.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/custom/example.zsh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/lib/aliases.zsh",
		"/home/mark/.oh-my-zsh/tools/install.sh",
		"/home/mark/Projects/ultimateshell/.ultimateshell/tools/require_tool.sh",
		"/home/mark/.oh-my-zsh/templates/zshrc.zsh-template",
		"/home/mark/.ultimateshell/bootstrap.sh",
		"/home/mark/.oh-my-zsh/tools/require_tool.sh"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"setpr",
			"green",
			"prompt",
			"promptleng",
			"prompt",
			"ctrl",
			"c",
			"common",
			"item",
			"'",
			"columns",
			"_insertString",
			"line",
			"write",
			"console",
			"question",
			"refresh",
			"_promptLength",
			"refresh",
			"prompt",
			"cursor",
			"simple",
			"substrt",
			"write",
			"sandbox",
			"sandbo",
			"vm",
			"context",
			"sandbox",
			"prompt",
			"write",
			"history",
			"write",
			"complete",
			"shell",
			"emit",
			"coffee",
			"simplev",
			"auto",
			"shell",
			"shl",
			"self",
			"text",
			"refresh",
			"prompt",
			"console",
			"history",
			"history_",
			"history_fg",
			"histor",
			"pause",
			"resume",
			"prompt",
			"question",
			"@_questionCallback",
			"online",
			"pause",
			"raw",
			"prompt",
			"_line()",
			"@_line()",
			"prompt",
			"setraw",
			"khist",
			"console.log",
			"write",
			"eval",
			"insert",
			"input",
			"write",
			"output",
			"historyin",
			"1",
			"historyindex",
			"histor",
			"setprom",
			"line",
			"lose",
			"_clo",
			" = -",
			" = \\(",
			" =",
			"Interface::",
			"write",
			"ttywrite",
			"insert",
			"refres",
			"setpro",
			"commonpre",
			"online",
			"line",
			"addhis",
			"_line",
			"writeline",
			"line",
			"@line",
			"line",
			"_line",
			"@_line",
			"line",
			"autocomp",
			"histor",
			"history",
			"history\n\n\n\n\n\n\n\n\n\n\n",
			"history",
			"line",
			"complete\n\n\n\n\n\n\n",
			"complete",
			"auto",
			"line",
			"historyIndex",
			"line",
			"auto",
			"autocompleter",
			"completer",
			"tabc",
			"stdin",
			"\\\\r",
			"line\\(",
			"line\\(\\)",
			"line()",
			"line",
			"s",
			"insertString",
			"write",
			"s",
			"buffer",
			"Buffer"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			": -",
			": (",
			":",
			"",
			"close",
			"@",
			"",
			"prompt",
			"stdin",
			"\n\n\nroot",
			"\n\n\nvm.",
			"vm",
			"shell.blockingProc",
			"sandbox",
			"shell.multilineMode",
			"shell.backlog",
			"output.push ",
			"val",
			"=",
			"'",
			"drawMode",
			"\\\"$1\\\":\\n",
			"\\\"$1\\\":",
			"\\U$1",
			"\\u$1",
			"$1",
			": \"",
			"\"",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "coffee-shell.coffee",
					"settings":
					{
						"buffer_size": 13999,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/Syntaxes/CoffeeScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 704.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/media/11FA-BF32/README.diskdefines",
					"settings":
					{
						"buffer_size": 228,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/cobells/.config/sublime-text-2/Packages/User/CoffeeShell.sublime-build",
					"settings":
					{
						"buffer_size": 128,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "readline.coffee",
					"settings":
					{
						"buffer_size": 10115,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/Syntaxes/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 7776,
						"regions":
						{
						},
						"selection":
						[
							[
								7776,
								7776
							]
						],
						"settings":
						{
							"syntax": "Packages/CoffeeScript/Syntaxes/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5325.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 32.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"bin/coffee-shell"
			],
			[
				"exec",
				"lexer.coffee"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 277.0,
	"status_bar_visible": true
}
