tokenparse = (code) ->

	tokens = (new Lexer).tokenize(code, {rewrite: on})
	output = []
	tmp = ''
	call_started = false
	index_started = false
	dot_started = false
	
	for i in [0...tokens.length]
		[lex,val] = tokens[i]

		echo [lex, val]

		if lex in ['.']
			#index_started = true
			output.push '.'

		else if lex in ['INDEX_START', '[']
			index_started = true
			output.push '['
		
		else if lex in ['INDEX_END', ']']
			#index_started = false
			#output.push ']'


		else if lex in ['CALL_START']
			#if !call_started
			call_started = true
			output.push '('
			tmp = output.join('')
			output = []
			#else
			#	output.push ','

		else if lex in ['CALL_END']
			#if call_started
			call_started = false
			tmp2 = output.join(', ')
			output = []
			output.push(tmp)
			output.push(tmp2)
			output.push(')')
			tmp3 = output.join(' ')
			output = [tmp3]
			console.log output
			tmp = tmp2 = tmp3 = ''


		else if lex in ['TERMINATOR']
			tmp2 = output.join('')
			output = []
			
			output.push(tmp+tmp2)
			tmp = tmp2 = ''

			index_started = false
			call_started = false
		
		else
			if lex in ['IDENTIFIER']
				if builtin[val]?
					output.push "builtin[\"#{val}\"]"
				else if binaries[val]?
					output.push "binaries[\"#{val}\"]"
				else if this[val]?
					output.push "this[\"#{val}\"]"
				else if val?
					output.push "#{val}"
				else output.push "\"#{val}\""

			else if lex in ['STRING']
				if builtin[val]?
					output.push "builtin[#{val}]"
				else if binaries[val]?
					output.push "binaries[#{val}]"
				else if this[val]?
					output.push "this[#{val}]"
				else
					output.push "#{val}"

				console.log output
					
			else if lex in ['FILEPATH'] 
				if path.existsSync
					output.push val

			else
				output.push "#{val}"
		
			#if tokens[i].spaced then output.push ' '
			if index_started || dot_started
				output +=']'
				index_started = dot_started = false
	
			#if dot_started
			#	output +=']'
			#	dot_started = false
			##if call_started
			#	output += ', '
			#console.log output

		(output.join(''))